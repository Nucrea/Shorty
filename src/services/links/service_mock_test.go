// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -package links -destination service_mock_test.go -source=interfaces.go Storage
//

// Package links is a generated GoMock package.
package links

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeleteLinks mocks base method.
func (m *MockStorage) DeleteLinks(ctx context.Context, ids ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLinks", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLinks indicates an expected call of DeleteLinks.
func (mr *MockStorageMockRecorder) DeleteLinks(ctx any, ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinks", reflect.TypeOf((*MockStorage)(nil).DeleteLinks), varargs...)
}

// GetLinkById mocks base method.
func (m *MockStorage) GetLinkById(ctx context.Context, id string) (*LinkDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkById", ctx, id)
	ret0, _ := ret[0].(*LinkDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkById indicates an expected call of GetLinkById.
func (mr *MockStorageMockRecorder) GetLinkById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkById", reflect.TypeOf((*MockStorage)(nil).GetLinkById), ctx, id)
}

// GetLinksByUserId mocks base method.
func (m *MockStorage) GetLinksByUserId(ctx context.Context, userId string) ([]*LinkDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinksByUserId", ctx, userId)
	ret0, _ := ret[0].([]*LinkDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinksByUserId indicates an expected call of GetLinksByUserId.
func (mr *MockStorageMockRecorder) GetLinksByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinksByUserId", reflect.TypeOf((*MockStorage)(nil).GetLinksByUserId), ctx, userId)
}

// SaveLink mocks base method.
func (m *MockStorage) SaveLink(ctx context.Context, id, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLink", ctx, id, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLink indicates an expected call of SaveLink.
func (mr *MockStorageMockRecorder) SaveLink(ctx, id, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLink", reflect.TypeOf((*MockStorage)(nil).SaveLink), ctx, id, url)
}

// SaveLinkForUser mocks base method.
func (m *MockStorage) SaveLinkForUser(ctx context.Context, id, userId, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLinkForUser", ctx, id, userId, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLinkForUser indicates an expected call of SaveLinkForUser.
func (mr *MockStorageMockRecorder) SaveLinkForUser(ctx, id, userId, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLinkForUser", reflect.TypeOf((*MockStorage)(nil).SaveLinkForUser), ctx, id, userId, url)
}
